//Graded Assessment: MongoDB Scripts with Relationships
// Part-1
//  1. Create the Collections and Insert Data:

db.createCollection("customers");
db.createCollection("orders");

db.customers.insertMany([
  { 
    name: "MonkeyDLuffy", 
    email: "luffy@gmail.com", 
    address: { street: "Laughtale", city: "one-piece", zipcode: "776433" }, 
    phone: "6909485604", 
    registration_date: new Date("2024-09-12T12:00:00Z")
  },
  { 
    name: "Roronora Zoro", 
    email: "Roronorazoro24@gmail.com", 
    address: { street: "vinland", city: "lunglei", zipcode: "796005" }, 
    phone: "9863883963", 
    registration_date: new Date("2024-12-09T12:00:00Z")
  },
  { 
    name: "God Ussop", 
    email: "ussop@gmail.com", 
    address: { street: "newworld", city: "rambi", zipcode: "2142780" }, 
    phone: "9645892346", 
    registration_date: new Date("2024-12-08T12:00:00Z")
  },
  { 
    name: "Nami San", 
    email: "nami@gmail.com", 
    address: { street: "ramrikawn", city: "hightech", zipcode: "3649283" }, 
    phone: "7635239064", 
    registration_date: new Date("2024-10-02T12:00:00Z")
  },
  { 
    name: "chooper", 
    email: "chooper@gmail.com", 
    address: { street: "newland", city: "landugar", zipcode: "876522" }, 
    phone: "9863872345", 
    registration_date: new Date("2024-06-11T12:00:00Z")
  }
]);

db.orders.insertMany([
  { 
    order_id: "ORD123456", 
    customer_id: ObjectId("673386614a7f73afb00d8190"), 
    order_date: new Date("2023-05-15T14:00:00Z"),
    status: "shipped", 
    items: [
      { product_name: "Laptop", quantity: 1, price: 80000 },
      { product_name: "Keyboard", quantity: 1, price: 5000 }
    ], 
    total_value: 85000 
  },
  { 
    order_id: "ORD123457", 
    customer_id: ObjectId("673386614a7f73afb00d8191"), 
    order_date: new Date("2024-19-10T10:30:00Z"),
    status: "shipped", 
    items: [
      { product_name: "Mouse", quantity: 1, price: 500 },
      { product_name: "Tyoe-c Cable", quantity: 3, price: 100 }
    ], 
    total_value: 800
  },
  { 
    order_id: "ORD123458", 
    customer_id: ObjectId("673386614a7f73afb00d8192"), 
    order_date: new Date("2024-20-10T13:00:00Z"),
    status: "shipped", 
    items: [
      { product_name: "Dextop", quantity: 1, price: 6000 },
      { product_name: "Table", quantity: 1, price: 30000 }
    ], 
    total_value: 9000 
  },
  { 
    order_id: "ORD123459", 
    customer_id: ObjectId("673386614a7f73afb00d8193"), 
    order_date: new Date("2024-17-10T15:45:00Z"),
    status: "delivered", 
    items: [
      { product_name: "Bag", quantity: 1, price: 1000 },
      { product_name: "Shoes", quantity: 1, price: 2000 }
    ], 
    total_value: 3000
  },
  { 
    order_id: "ORD123460", 
    customer_id: ObjectId("673386614a7f73afb00d8194"), 
    order_date: new Date("2024-11-10T09:00:00Z"),
    status: "delivered", 
    items: [
      { product_name: "Bed", quantity: 1, price: 10000 },
      { product_name: "Bedsheet", quantity: 1, price: 5000 }
    ], 
    total_value: 10500
  }
]);


// 2. Find Orders for a Specific Customer:

const customer = db.customers.findOne({ name: "MonkeyDLuffy" });
const orders = db.orders.find({ customer_id: customer._id }).toArray();
printjson(orders);

// 3. Find the Customer for a Specific Order:

const order = db.orders.findOne({ order_id: "ORD123458" });
const customerDetails = db.customers.findOne({ _id: order.customer_id });
printjson(customerDetails);

// 4. Update Order Status:

db.orders.updateOne(
  { order_id: "ORD123458" },
  { $set: { status: "delivered" } }
);

// 5. Delete an Order:

db.orders.deleteOne({ order_id: "ORD123457" });

Part-2
// 1. Calculate Total Value of All Orders by Customer:

db.orders.aggregate([
  {
    $group: {
      _id: "$customer_id",
      total_spent: { $sum: "$total_value" }
    }
  },
  {
    $lookup: {
      from: "customers",
      localField: "_id",
      foreignField: "_id",
      as: "customer_info"
    }
  },
  {
    $unwind: "$customer_info"
  },
  {
    $project: {
      customer_name: "$customer_info.name",
      total_spent: 1
    }
  }
]);

// 2. Group Orders by Status:

db.orders.aggregate([
  {
    $group: {
      _id: "$status",
      count: { $sum: 1 }
    }
  }
]);

// 3. List Customers with Their Recent Orders:

db.orders.aggregate([
  {
    $sort: { order_date: -1 } 
  },
  {
    $group: {
      _id: "$customer_id",
      most_recent_order: { $first: "$$ROOT" }
    }
  },
  {
    $lookup: {
      from: "customers",
      localField: "_id",
      foreignField: "_id",
      as: "customer_info"
    }
  },
  {
    $unwind: "$customer_info"
  },
  {
    $project: {
      customer_name: "$customer_info.name",
      customer_email: "$customer_info.email",
      order_id: "$most_recent_order.order_id",
      total_value: "$most_recent_order.total_value",
      order_date: "$most_recent_order.order_date"
    }
  }
]);

// 4. Find the Most Expensive Order by Customer:

db.orders.aggregate([
  {
    $sort: { total_value: -1 } 
  },
  {
    $group: {
      _id: "$customer_id",
      most_expensive_order: { $first: "$$ROOT" }
    }
  },
  {
    $lookup: {
      from: "customers",
      localField: "_id",
      foreignField: "_id",
      as: "customer_info"
    }
  },
  {
    $unwind: "$customer_info"
  },
  {
    $project: {
      customer_name: "$customer_info.name",
      order_id: "$most_expensive_order.order_id",
      total_value: "$most_expensive_order.total_value"
    }
  }
]);


Part 3: Real-World Scenario with Relationships
// 1. Find All Customers Who Placed Orders in the Last Month:

const lastMonth = new Date();
lastMonth.setMonth(lastMonth.getMonth() - 1);

db.orders.aggregate([
  {
    $match: { order_date: { $gte: lastMonth } }
  },
  {
    $lookup: {
      from: "customers",
      localField: "customer_id",
      foreignField: "_id",
      as: "customer_info"
    }
  },
  {
    $unwind: "$customer_info"
  },
  {
    $project: {
      customer_name: "$customer_info.name",
      customer_email: "$customer_info.email",
      most_recent_order_date: "$order_date"
    }
  }
]);


// 2. Find All Products Ordered by a Specific Customer:

const customer = db.customers.findOne({ name: "MonkeyDLuffy" });

db.orders.aggregate([
  { $match: { customer_id: customer._id } },
  { $unwind: "$items" },
  {
    $group: {
      _id: "$items.product_name",
      total_quantity: { $sum: "$items.quantity" }
    }
  },
  {
    $project: {
      product_name: "$_id",
      total_quantity: 1
    }
  }
]);


// 3. Find the Top 3 Customers with the Most Expensive Total Orders:

db.orders.aggregate([
  {
    $group: {
      _id: "$customer_id",
      total_spent: { $sum: "$total_value" }
    }
  },
  {
    $sort: { total_spent: -1 } 
  },
  { $limit: 3 },
  {
    $lookup: {
      from: "customers",
      localField: "_id",
      foreignField: "_id",
      as: "customer_info"
    }
  },
  {
    $unwind: "$customer_info"
  },
  {
    $project: {
      customer_name: "$customer_info.name",
      total_spent: 1
    }
  }
]);


// 4. Add a New Order for an Existing Customer:

const MonkeyDLuffy = db.customers.findOne({ name: "MonkeyDLuffy" });

db.orders.insertOne({
  order_id: "ORD123461",
  customer_id: Monkey._id,
  order_date: new Date("2024-11-12T09:00:00Z"),
  status: "pending",
  items: [
    { product_name: "Smartphone", quantity: 1, price: 30000 },
    { product_name: "Headphones", quantity: 1, price: 6000 }
  ],
  total_value: 36000
});

//1. Find Customers Who Have Not Placed Orders:

db.customers.aggregate([
  {
    $lookup: {
      from: "orders",
      localField: "_id",
      foreignField: "customer_id",
      as: "orders"
    }
  },
  {
    $match: { "orders": { $size: 0 } }
  },
  {
    $project: {
      customer_name: 1,
      customer_email: 1
    }
  }
]);


// 2. Calculate the Average Number of Items Ordered per Order:

db.orders.aggregate([
  {
    $project: {
      number_of_items: { $size: "$items" }
    }
  },
  {
    $group: {
      _id: null,
      average_items: { $avg: "$number_of_items" }
    }
  }
]);

// 3. Join Customer and Order Data Using $lookup:

db.orders.aggregate([
  {
    $lookup: {
      from: "customers",
      localField: "customer_id",
      foreignField: "_id",
      as: "customer_info"
    }
  },
  {
    $unwind: "$customer_info"
  },
  {
    $project: {
      customer_name: "$customer_info.name",
      customer_email: "$customer_info.email",
      order_id: 1,
      total_value: 1,
      order_date: 1
    }
  }
]);
